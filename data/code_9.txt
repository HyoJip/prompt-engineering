# 은행 계좌 시스템을 모방한 프로그램

class BankAccount:
    """A class representing a bank account."""
    
    def __init__(self, account_holder, initial_balance=0):
        self.account_holder = account_holder
        self.balance = initial_balance
        self.transaction_history = []
        self.add_transaction("Account created", initial_balance)
    
    def deposit(self, amount):
        """Deposit money into the account."""
        if amount <= 0:
            print("Deposit amount must be positive.")
            return
        self.balance += amount
        self.add_transaction("Deposit", amount)
        print(f"{amount} deposited. New balance: {self.balance}")
    
    def withdraw(self, amount):
        """Withdraw money from the account."""
        if amount <= 0:
            print("Withdrawal amount must be positive.")
            return
        if amount > self.balance:
            print("Insufficient funds.")
            return
        self.balance -= amount
        self.add_transaction("Withdrawal", -amount)
        print(f"{amount} withdrawn. New balance: {self.balance}")
    
    def get_balance(self):
        """Return the current account balance."""
        print(f"Current balance: {self.balance}")
        return self.balance
    
    def add_transaction(self, transaction_type, amount):
        """Add a transaction to the history."""
        self.transaction_history.append((transaction_type, amount))
    
    def show_transaction_history(self):
        """Display the account's transaction history."""
        print("Transaction History:")
        for transaction_type, amount in self.transaction_history:
            print(f"{transaction_type}: {amount}")

# Test the BankAccount class
if __name__ == "__main__":
    account = BankAccount("Alice", 1000)
    account.deposit(500)
    account.withdraw(200)
    account.get_balance()
    account.withdraw(1500)  # Attempt to withdraw more than balance
    account.show_transaction_history()